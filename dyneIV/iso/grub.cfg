# Copyright (C) 2023-2024 Dyne.org Foundation
#
# Designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# some code inspired by Super Grub Disk by Adrian Gibanel Lopez
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	Please refer
# to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, , see <https://www.gnu.org/licenses/>.

insmod ext2
insmod part_gpt
insmod part_msdos
insmod fat
insmod iso9660
insmod ntfs
insmod all_video
insmod font

set default="0"
set timeout=30

insmod regexp

# checks if $1 contains $2
function strcontains {
    set str="$1"; set pattern="$2"
    if regexp ".*${pattern}.*" "$str"; then return 0; else return 1; fi
}

# search all storage devices containing $*
function scan_disks {
    set found_disks=""
    for dev in (*); do
        regexp -s device '\((.*)\)' ${dev}
        for needle in $*; do
            if strcontains "${device}" "${needle}"; then
                found_disks="$found_disks ${dev}"
            fi
        done
    done
    export found_disks
}

# Saves into $1 the $2 without parenthesis: (hd0) -> hd0
function trimpar { regexp -s $1 '\((.*)\)' $2; export $1; }

# Extracts the pathname from $1 and saves it into $2
function pathname { regexp -s 2:"$2" '^(\(.*\))?(/.*)$' "$1"; }

scan_disks hd # set found_disks

function scan_nests {
    nstdir="$1"
    nstname="$2"
    for dev in ${found_disks}; do
        if test -z "$dev" -o -z "$nstdir" -o -z "$nstname"; then continue; fi
        file=${dev}${nstdir}/${nstname}
        if ! test -f "$file"; then continue; fi
        echo "scan_nests: found in ${dev}"
        menuentry "dyne:bolic NEST on HDD: ${file}" {
            set gfxpayload=keep
            linux ($root)/live/vmlinuz boot=live vga=773 persistence persistence-path="${nstdir}" persistence-label="${nstname}"
            initrd ($root)/live/initrd
        }
    done
    sleep 1
    return 0
}

set live_label="DYNEIV"
set live_dir="/dyne"
search --no-floppy --set=root --label ${live_label}

scan_nests ${live_dir} dyne.nst

function scan_isos {
    isodir="$1"
    isoname="$2"
    for dev in ${found_disks}; do
        if test -z "$dev" -o -z "$isodir" -o -z "$isoname"; then continue; fi
        file=${dev}${isodir}/${isoname}
        if ! test -f "$file"; then continue; fi
        echo "scan_isos: found in ${dev}"
        menuentry "dyne:bolic ISO on HDD: ${file}" {
            set gfxpayload=keep
            linux ($root)/live/vmlinuz boot=live vga=773 nopersistence findiso="${isodir}/${isoname}"
            initrd ($root)/live/initrd
        }
    done
    return 0
}

scan_isos ${live_dir} dynebolic.iso

menuentry "Dynebolic Live Boot" {
    set gfxpayload=keep
    linux ($root)/live/vmlinuz boot=live vga=773 nopersistence
    initrd ($root)/live/initrd
}

menuentry "dyne:bolic on USB (to RAM)" {
    set gfxpayload=keep
    linux ($root)/live/vmlinuz boot=live vga=773 nopersistence toram
    initrd ($root)/live/initrd
}

menuentry "dyne:bolic on USB (serial port)" {
    linux ($root)/live/vmlinuz boot=live nomodeset console=ttyS0,115200 nopersistence
    initrd ($root)/live/initrd
}

# Custom menu entry for dynamic localization
menuentry "Dynebolic Live Boot with Custom Localization" {
    set gfxpayload=keep
    # Prompt the user for language and keyboard layout
    echo "Enter your preferred language (e.g., en_US, fr_FR):"
    read lang
    echo "Enter your preferred keyboard layout (e.g., us, fr):"
    read keymap

    # Pass the selected language and keyboard layout to the kernel
    linux ($root)/live/vmlinuz boot=live vga=773 nopersistence locales=$lang keyboard-layouts=$keymap
    initrd ($root)/live/initrd
}

menuentry "GRUB Invaders" {
    insmod gfxterm
    terminal_output gfxterm
    grub-invaders
}

# Local Variables:
# mode: sh
# End:
