# Copyright (C) 2023-2024 Dyne.org Foundation
#
# Designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# some code inspired by Super Grub Disk by Adrian Gibanel Lopez
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	Please refer
# to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, , see <https://www.gnu.org/licenses/>.

insmod ext2
insmod part_gpt
insmod part_msdos
insmod fat
insmod iso9660
insmod ntfs

# insmod all_video
# insmod font

set default="0"
set timeout=30

insmod regexp

# checks if $1 contains $2
function strcontains {
    set str="$1"; set pattern="$2"
    if regexp ".*${pattern}.*" "$str"; then return 0; else return 1; fi
}

# search all storage devices containing $*
function scan_disks {
	set found_disks=""
	for dev in (*); do
		# $device: parenthesis removed from $dev
		regexp -s device '\((.*)\)' ${dev}
		# Discard floppy and cdrom devices in search
		# But search them if their search has been enforced
		for needle in $*; do
			if strcontains "${device}" "${needle}"; then
				found_disks="$found_disks ${dev}"
			fi
		done
	done
	export found_disks
}

# Saves into $1 the $2 without parenthesis: (hd0) -> hd0
function trimpar { regexp -s $1 '\((.*)\)' $2; export $1; }
#
function pathname { regexp -s 2:"$2" '^(\(.*\))?(/.*)$' "$1"; }
#

scan_disks hd # set found_disks

function scan_nests {
	nstdir="$1"
	nstname="$2"
	for dev in ${found_disks}; do
		if test -z "$dev" -o -z "$nstdir" -o -z "$nstname"; then continue; fi
		file=${dev}${nstdir}/${nstname}
		# echo "scan_nests: $file"
		if ! test -f "$file"; then continue; fi
		echo "scan_nests: found in ${dev}"
		# sleep 1
		menuentry "dyne:bolic NEST on HDD: ${dev}" {
			linux ($root)/live/vmlinuz boot=live vga=773 persistence persistence-path="${nstdir}" persistence-label="${nstname}"
			initrd ($root)/live/initrd
		}
		# TODO: compose whitelist or other method to pass device to live-boot
    done
	sleep 1
	return 0
}

search --no-floppy --set=root --label DYNEIV

scan_nests /dyne dyne.nst

# Supply default value for root in grub in UEFI ISO
# Sometimes the search command in GRUB2 used in UEFI ISO does not find
# the root device. This was seen at least in Debian Buster running in Qemu
# set root=cd0
menuentry "dyne:bolic search NEST on HDDs" {
	linux ($root)/live/vmlinuz boot=live vga=773 persistence persistence-path=dyne persistence-label=dyne.nst
	initrd ($root)/live/initrd
}

function dynebolic_iso_entry {
	realdev="$1"
	isopath="$2"
	loopdev="$3"
	# final tests to see if the dynebolic iso contains squash, initrd and kernel
	if ! test -f /live/filesystem.squashfs; then return 1; fi
	if ! test -f /live/initrd; then return 1; fi
	if ! test -f /live/vmlinuz; then return 1; fi
	# TODO: detect persistence file
	menuentry "dyne:bolic ISO on HDD: ${realdev} ${isopath}" "$realdev" "$isopath" {
		set isofile="${2}${3}"
		loopback loop "${isofile}"
		linux (loop)/live/vmlinuz boot=live vga=773 findiso=${3} persistence
		initrd (loop)/live/initrd
	}
	return 0
}

function scan_isos {
	isodirs="$*"
	isoname="dynebolic"
	for dev in ${found_disks}; do
		# trimpar iso_device $dev
		# (${iso_device})/${dir}/*.iso \
			#  (${iso_device})/${dir}/*.ISO \
		for dir in $isodirs; do
			for file in ${dev}${dir}/${isoname}.iso ${dev}${dir}/${isoname}.ISO; do
				if ! test -f "$file"; then continue; fi
				pathname $file isopath
				if test -z "$dev" -o -z "$isopath"; then continue; fi
				if ! loopback loopdev_scan "$file"; then continue; fi
				saved_root=$root
				set root=(loopdev_scan)
				dynebolic_iso_entry $dev $isopath (loopdev_scan)
				set root=$saved_root
				loopback -d loopdev_scan
			done
		done
	done
	return 0
}


# scan_isos /dyne

menuentry "dyne:bolic no NEST" {
    linux ($root)/live/vmlinuz boot=live vga=773 persistence
    initrd ($root)/live/initrd
}

# If X has issues finding screens, experiment with/without nomodeset.
menuentry "dyne:bolic search ISO on HDDs" {
    linux ($root)/live/vmlinuz boot=live vga=773 persistence findiso=dyne/dynebolic.iso
    initrd ($root)/live/initrd
}

menuentry "dyne:bolic on USB (to RAM)" {
    linux ($root)/live/vmlinuz boot=live vga=773 persistence=0 toram
    initrd ($root)/live/initrd
}

# menuentry "dyne:bolic (text mode)" {
#     linux ($root)/live/vmlinuz boot=live vga=773 persistence nox
#     initrd ($root)/live/initrd
# }

menuentry "dyne:bolic on USB (serial port)" {
    linux ($root)/live/vmlinuz boot=live nomodeset console=ttyS0,115200 persistence
    initrd ($root)/live/initrd
}

# Local Variables:
# mode: sh
# End:
